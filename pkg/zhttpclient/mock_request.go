// Code generated by mockery v2.20.0. DO NOT EDIT.

package httpclient

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// MockZRequest is an autogenerated mock type for the ZRequest type
type MockZRequest struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *MockZRequest) Get(ctx context.Context) (int, []byte, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, []byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) []byte); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Post provides a mock function with given fields: ctx
func (_m *MockZRequest) Post(ctx context.Context) (int, []byte, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, []byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) []byte); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetBody provides a mock function with given fields: body
func (_m *MockZRequest) SetBody(body io.Reader) ZRequest {
	ret := _m.Called(body)

	var r0 ZRequest
	if rf, ok := ret.Get(0).(func(io.Reader) ZRequest); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ZRequest)
		}
	}

	return r0
}

// SetHeaders provides a mock function with given fields: headers
func (_m *MockZRequest) SetHeaders(headers map[string]string) ZRequest {
	ret := _m.Called(headers)

	var r0 ZRequest
	if rf, ok := ret.Get(0).(func(map[string]string) ZRequest); ok {
		r0 = rf(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ZRequest)
		}
	}

	return r0
}

// SetQueryParams provides a mock function with given fields: params
func (_m *MockZRequest) SetQueryParams(params url.Values) ZRequest {
	ret := _m.Called(params)

	var r0 ZRequest
	if rf, ok := ret.Get(0).(func(url.Values) ZRequest); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ZRequest)
		}
	}

	return r0
}

// SetRetryPolicy provides a mock function with given fields: retryPolicy
func (_m *MockZRequest) SetRetryPolicy(retryPolicy *RetryPolicy) ZRequest {
	ret := _m.Called(retryPolicy)

	var r0 ZRequest
	if rf, ok := ret.Get(0).(func(*RetryPolicy) ZRequest); ok {
		r0 = rf(retryPolicy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ZRequest)
		}
	}

	return r0
}

// SetURL provides a mock function with given fields: _a0
func (_m *MockZRequest) SetURL(_a0 string) ZRequest {
	ret := _m.Called(_a0)

	var r0 ZRequest
	if rf, ok := ret.Get(0).(func(string) ZRequest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ZRequest)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockZRequest interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockZRequest creates a new instance of MockZRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockZRequest(t mockConstructorTestingTNewMockZRequest) *MockZRequest {
	mock := &MockZRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
