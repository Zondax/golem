// Code generated by mockery v2.20.0. DO NOT EDIT.

package httpclient

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// MockZHTTPClient is an autogenerated mock type for the ZHTTPClient type
type MockZHTTPClient struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, req
func (_m *MockZHTTPClient) Do(ctx context.Context, req *http.Request) (int, []byte, error) {
	ret := _m.Called(ctx, req)

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (int, []byte, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) []byte); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *http.Request) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, _a1, headers, params
func (_m *MockZHTTPClient) Get(ctx context.Context, _a1 string, headers map[string]string, params url.Values) (int, []byte, error) {
	ret := _m.Called(ctx, _a1, headers, params)

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, url.Values) (int, []byte, error)); ok {
		return rf(ctx, _a1, headers, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, url.Values) int); ok {
		r0 = rf(ctx, _a1, headers, params)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, url.Values) []byte); ok {
		r1 = rf(ctx, _a1, headers, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, url.Values) error); ok {
		r2 = rf(ctx, _a1, headers, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Post provides a mock function with given fields: ctx, _a1, body, headers
func (_m *MockZHTTPClient) Post(ctx context.Context, _a1 string, body io.Reader, headers map[string]string) (int, []byte, error) {
	ret := _m.Called(ctx, _a1, body, headers)

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, map[string]string) (int, []byte, error)); ok {
		return rf(ctx, _a1, body, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, map[string]string) int); ok {
		r0 = rf(ctx, _a1, body, headers)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, map[string]string) []byte); ok {
		r1 = rf(ctx, _a1, body, headers)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, io.Reader, map[string]string) error); ok {
		r2 = rf(ctx, _a1, body, headers)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetRetryPolicy provides a mock function with given fields: retryPolicy
func (_m *MockZHTTPClient) SetRetryPolicy(retryPolicy *RetryPolicy) error {
	ret := _m.Called(retryPolicy)

	var r0 error
	if rf, ok := ret.Get(0).(func(*RetryPolicy) error); ok {
		r0 = rf(retryPolicy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockZHTTPClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockZHTTPClient creates a new instance of MockZHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockZHTTPClient(t mockConstructorTestingTNewMockZHTTPClient) *MockZHTTPClient {
	mock := &MockZHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
