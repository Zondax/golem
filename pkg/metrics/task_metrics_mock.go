// Code generated by mockery v2.20.0. DO NOT EDIT.

package metrics

import mock "github.com/stretchr/testify/mock"

// MockTaskMetrics is an autogenerated mock type for the TaskMetrics type
type MockTaskMetrics struct {
	mock.Mock
}

// AppName provides a mock function with given fields:
func (_m *MockTaskMetrics) AppName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DecrementMetric provides a mock function with given fields: name, labels
func (_m *MockTaskMetrics) DecrementMetric(name string, labels ...string) error {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(name, labels...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementMetric provides a mock function with given fields: name, labels
func (_m *MockTaskMetrics) IncrementMetric(name string, labels ...string) error {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(name, labels...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockTaskMetrics) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegisterMetric provides a mock function with given fields: name, help, labels, handler
func (_m *MockTaskMetrics) RegisterMetric(name string, help string, labels []string, handler MetricHandler) error {
	ret := _m.Called(name, help, labels, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, MetricHandler) error); ok {
		r0 = rf(name, help, labels, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockTaskMetrics) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *MockTaskMetrics) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMetric provides a mock function with given fields: name, value, labels
func (_m *MockTaskMetrics) UpdateMetric(name string, value float64, labels ...string) error {
	_va := make([]interface{}, len(labels))
	for _i := range labels {
		_va[_i] = labels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, ...string) error); ok {
		r0 = rf(name, value, labels...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockTaskMetrics interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTaskMetrics creates a new instance of MockTaskMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTaskMetrics(t mockConstructorTestingTNewMockTaskMetrics) *MockTaskMetrics {
	mock := &MockTaskMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
