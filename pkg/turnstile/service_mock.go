// Code generated by mockery. DO NOT EDIT.

package turnstile

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function with given fields: ctx, token
func (_m *MockService) Verify(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockService_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockService_Expecter) Verify(ctx interface{}, token interface{}) *MockService_Verify_Call {
	return &MockService_Verify_Call{Call: _e.mock.On("Verify", ctx, token)}
}

func (_c *MockService_Verify_Call) Run(run func(ctx context.Context, token string)) *MockService_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_Verify_Call) Return(_a0 error) *MockService_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Verify_Call) RunAndReturn(run func(context.Context, string) error) *MockService_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
