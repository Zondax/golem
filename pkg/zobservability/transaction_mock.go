// Code generated by mockery. DO NOT EDIT.

package zobservability

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTransaction is an autogenerated mock type for the Transaction type
type MockTransaction struct {
	mock.Mock
}

type MockTransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransaction) EXPECT() *MockTransaction_Expecter {
	return &MockTransaction_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with no fields
func (_m *MockTransaction) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTransaction_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockTransaction_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockTransaction_Expecter) Context() *MockTransaction_Context_Call {
	return &MockTransaction_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockTransaction_Context_Call) Run(run func()) *MockTransaction_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransaction_Context_Call) Return(_a0 context.Context) *MockTransaction_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_Context_Call) RunAndReturn(run func() context.Context) *MockTransaction_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Finish provides a mock function with given fields: status
func (_m *MockTransaction) Finish(status TransactionStatus) {
	_m.Called(status)
}

// MockTransaction_Finish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finish'
type MockTransaction_Finish_Call struct {
	*mock.Call
}

// Finish is a helper method to define mock.On call
//   - status TransactionStatus
func (_e *MockTransaction_Expecter) Finish(status interface{}) *MockTransaction_Finish_Call {
	return &MockTransaction_Finish_Call{Call: _e.mock.On("Finish", status)}
}

func (_c *MockTransaction_Finish_Call) Run(run func(status TransactionStatus)) *MockTransaction_Finish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TransactionStatus))
	})
	return _c
}

func (_c *MockTransaction_Finish_Call) Return() *MockTransaction_Finish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransaction_Finish_Call) RunAndReturn(run func(TransactionStatus)) *MockTransaction_Finish_Call {
	_c.Run(run)
	return _c
}

// SetData provides a mock function with given fields: key, value
func (_m *MockTransaction) SetData(key string, value interface{}) {
	_m.Called(key, value)
}

// MockTransaction_SetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetData'
type MockTransaction_SetData_Call struct {
	*mock.Call
}

// SetData is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockTransaction_Expecter) SetData(key interface{}, value interface{}) *MockTransaction_SetData_Call {
	return &MockTransaction_SetData_Call{Call: _e.mock.On("SetData", key, value)}
}

func (_c *MockTransaction_SetData_Call) Run(run func(key string, value interface{})) *MockTransaction_SetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockTransaction_SetData_Call) Return() *MockTransaction_SetData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransaction_SetData_Call) RunAndReturn(run func(string, interface{})) *MockTransaction_SetData_Call {
	_c.Run(run)
	return _c
}

// SetName provides a mock function with given fields: name
func (_m *MockTransaction) SetName(name string) {
	_m.Called(name)
}

// MockTransaction_SetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetName'
type MockTransaction_SetName_Call struct {
	*mock.Call
}

// SetName is a helper method to define mock.On call
//   - name string
func (_e *MockTransaction_Expecter) SetName(name interface{}) *MockTransaction_SetName_Call {
	return &MockTransaction_SetName_Call{Call: _e.mock.On("SetName", name)}
}

func (_c *MockTransaction_SetName_Call) Run(run func(name string)) *MockTransaction_SetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransaction_SetName_Call) Return() *MockTransaction_SetName_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransaction_SetName_Call) RunAndReturn(run func(string)) *MockTransaction_SetName_Call {
	_c.Run(run)
	return _c
}

// SetTag provides a mock function with given fields: key, value
func (_m *MockTransaction) SetTag(key string, value string) {
	_m.Called(key, value)
}

// MockTransaction_SetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTag'
type MockTransaction_SetTag_Call struct {
	*mock.Call
}

// SetTag is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockTransaction_Expecter) SetTag(key interface{}, value interface{}) *MockTransaction_SetTag_Call {
	return &MockTransaction_SetTag_Call{Call: _e.mock.On("SetTag", key, value)}
}

func (_c *MockTransaction_SetTag_Call) Run(run func(key string, value string)) *MockTransaction_SetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockTransaction_SetTag_Call) Return() *MockTransaction_SetTag_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransaction_SetTag_Call) RunAndReturn(run func(string, string)) *MockTransaction_SetTag_Call {
	_c.Run(run)
	return _c
}

// StartChild provides a mock function with given fields: operation, opts
func (_m *MockTransaction) StartChild(operation string, opts ...SpanOption) Span {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChild")
	}

	var r0 Span
	if rf, ok := ret.Get(0).(func(string, ...SpanOption) Span); ok {
		r0 = rf(operation, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Span)
		}
	}

	return r0
}

// MockTransaction_StartChild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartChild'
type MockTransaction_StartChild_Call struct {
	*mock.Call
}

// StartChild is a helper method to define mock.On call
//   - operation string
//   - opts ...SpanOption
func (_e *MockTransaction_Expecter) StartChild(operation interface{}, opts ...interface{}) *MockTransaction_StartChild_Call {
	return &MockTransaction_StartChild_Call{Call: _e.mock.On("StartChild",
		append([]interface{}{operation}, opts...)...)}
}

func (_c *MockTransaction_StartChild_Call) Run(run func(operation string, opts ...SpanOption)) *MockTransaction_StartChild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SpanOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(SpanOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTransaction_StartChild_Call) Return(_a0 Span) *MockTransaction_StartChild_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransaction_StartChild_Call) RunAndReturn(run func(string, ...SpanOption) Span) *MockTransaction_StartChild_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransaction creates a new instance of MockTransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransaction {
	mock := &MockTransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
