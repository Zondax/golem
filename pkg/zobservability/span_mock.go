// Code generated by mockery. DO NOT EDIT.

package zobservability

import (
	mock "github.com/stretchr/testify/mock"
	trace "go.opentelemetry.io/otel/trace"
)

// MockSpan is an autogenerated mock type for the Span type
type MockSpan struct {
	mock.Mock
}

type MockSpan_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpan) EXPECT() *MockSpan_Expecter {
	return &MockSpan_Expecter{mock: &_m.Mock}
}

// Finish provides a mock function with no fields
func (_m *MockSpan) Finish() {
	_m.Called()
}

// MockSpan_Finish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finish'
type MockSpan_Finish_Call struct {
	*mock.Call
}

// Finish is a helper method to define mock.On call
func (_e *MockSpan_Expecter) Finish() *MockSpan_Finish_Call {
	return &MockSpan_Finish_Call{Call: _e.mock.On("Finish")}
}

func (_c *MockSpan_Finish_Call) Run(run func()) *MockSpan_Finish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpan_Finish_Call) Return() *MockSpan_Finish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_Finish_Call) RunAndReturn(run func()) *MockSpan_Finish_Call {
	_c.Run(run)
	return _c
}

// SetData provides a mock function with given fields: key, value
func (_m *MockSpan) SetData(key string, value interface{}) {
	_m.Called(key, value)
}

// MockSpan_SetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetData'
type MockSpan_SetData_Call struct {
	*mock.Call
}

// SetData is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockSpan_Expecter) SetData(key interface{}, value interface{}) *MockSpan_SetData_Call {
	return &MockSpan_SetData_Call{Call: _e.mock.On("SetData", key, value)}
}

func (_c *MockSpan_SetData_Call) Run(run func(key string, value interface{})) *MockSpan_SetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockSpan_SetData_Call) Return() *MockSpan_SetData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_SetData_Call) RunAndReturn(run func(string, interface{})) *MockSpan_SetData_Call {
	_c.Run(run)
	return _c
}

// SetError provides a mock function with given fields: err, opts
func (_m *MockSpan) SetError(err error, opts ...trace.EventOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockSpan_SetError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetError'
type MockSpan_SetError_Call struct {
	*mock.Call
}

// SetError is a helper method to define mock.On call
//   - err error
//   - opts ...trace.EventOption
func (_e *MockSpan_Expecter) SetError(err interface{}, opts ...interface{}) *MockSpan_SetError_Call {
	return &MockSpan_SetError_Call{Call: _e.mock.On("SetError",
		append([]interface{}{err}, opts...)...)}
}

func (_c *MockSpan_SetError_Call) Run(run func(err error, opts ...trace.EventOption)) *MockSpan_SetError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.EventOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.EventOption)
			}
		}
		run(args[0].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockSpan_SetError_Call) Return() *MockSpan_SetError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_SetError_Call) RunAndReturn(run func(error, ...trace.EventOption)) *MockSpan_SetError_Call {
	_c.Run(run)
	return _c
}

// SetTag provides a mock function with given fields: key, value
func (_m *MockSpan) SetTag(key string, value string) {
	_m.Called(key, value)
}

// MockSpan_SetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTag'
type MockSpan_SetTag_Call struct {
	*mock.Call
}

// SetTag is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockSpan_Expecter) SetTag(key interface{}, value interface{}) *MockSpan_SetTag_Call {
	return &MockSpan_SetTag_Call{Call: _e.mock.On("SetTag", key, value)}
}

func (_c *MockSpan_SetTag_Call) Run(run func(key string, value string)) *MockSpan_SetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSpan_SetTag_Call) Return() *MockSpan_SetTag_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_SetTag_Call) RunAndReturn(run func(string, string)) *MockSpan_SetTag_Call {
	_c.Run(run)
	return _c
}

// NewMockSpan creates a new instance of MockSpan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpan(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpan {
	mock := &MockSpan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
