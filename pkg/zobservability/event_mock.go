// Code generated by mockery. DO NOT EDIT.

package zobservability

import mock "github.com/stretchr/testify/mock"

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// Capture provides a mock function with no fields
func (_m *MockEvent) Capture() {
	_m.Called()
}

// MockEvent_Capture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capture'
type MockEvent_Capture_Call struct {
	*mock.Call
}

// Capture is a helper method to define mock.On call
func (_e *MockEvent_Expecter) Capture() *MockEvent_Capture_Call {
	return &MockEvent_Capture_Call{Call: _e.mock.On("Capture")}
}

func (_c *MockEvent_Capture_Call) Run(run func()) *MockEvent_Capture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Capture_Call) Return() *MockEvent_Capture_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_Capture_Call) RunAndReturn(run func()) *MockEvent_Capture_Call {
	_c.Run(run)
	return _c
}

// SetError provides a mock function with given fields: err
func (_m *MockEvent) SetError(err error) {
	_m.Called(err)
}

// MockEvent_SetError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetError'
type MockEvent_SetError_Call struct {
	*mock.Call
}

// SetError is a helper method to define mock.On call
//   - err error
func (_e *MockEvent_Expecter) SetError(err interface{}) *MockEvent_SetError_Call {
	return &MockEvent_SetError_Call{Call: _e.mock.On("SetError", err)}
}

func (_c *MockEvent_SetError_Call) Run(run func(err error)) *MockEvent_SetError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockEvent_SetError_Call) Return() *MockEvent_SetError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_SetError_Call) RunAndReturn(run func(error)) *MockEvent_SetError_Call {
	_c.Run(run)
	return _c
}

// SetFingerprint provides a mock function with given fields: fingerprint
func (_m *MockEvent) SetFingerprint(fingerprint []string) {
	_m.Called(fingerprint)
}

// MockEvent_SetFingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFingerprint'
type MockEvent_SetFingerprint_Call struct {
	*mock.Call
}

// SetFingerprint is a helper method to define mock.On call
//   - fingerprint []string
func (_e *MockEvent_Expecter) SetFingerprint(fingerprint interface{}) *MockEvent_SetFingerprint_Call {
	return &MockEvent_SetFingerprint_Call{Call: _e.mock.On("SetFingerprint", fingerprint)}
}

func (_c *MockEvent_SetFingerprint_Call) Run(run func(fingerprint []string)) *MockEvent_SetFingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockEvent_SetFingerprint_Call) Return() *MockEvent_SetFingerprint_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_SetFingerprint_Call) RunAndReturn(run func([]string)) *MockEvent_SetFingerprint_Call {
	_c.Run(run)
	return _c
}

// SetLevel provides a mock function with given fields: level
func (_m *MockEvent) SetLevel(level Level) {
	_m.Called(level)
}

// MockEvent_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type MockEvent_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - level Level
func (_e *MockEvent_Expecter) SetLevel(level interface{}) *MockEvent_SetLevel_Call {
	return &MockEvent_SetLevel_Call{Call: _e.mock.On("SetLevel", level)}
}

func (_c *MockEvent_SetLevel_Call) Run(run func(level Level)) *MockEvent_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Level))
	})
	return _c
}

func (_c *MockEvent_SetLevel_Call) Return() *MockEvent_SetLevel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_SetLevel_Call) RunAndReturn(run func(Level)) *MockEvent_SetLevel_Call {
	_c.Run(run)
	return _c
}

// SetTag provides a mock function with given fields: key, value
func (_m *MockEvent) SetTag(key string, value string) {
	_m.Called(key, value)
}

// MockEvent_SetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTag'
type MockEvent_SetTag_Call struct {
	*mock.Call
}

// SetTag is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockEvent_Expecter) SetTag(key interface{}, value interface{}) *MockEvent_SetTag_Call {
	return &MockEvent_SetTag_Call{Call: _e.mock.On("SetTag", key, value)}
}

func (_c *MockEvent_SetTag_Call) Run(run func(key string, value string)) *MockEvent_SetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEvent_SetTag_Call) Return() *MockEvent_SetTag_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_SetTag_Call) RunAndReturn(run func(string, string)) *MockEvent_SetTag_Call {
	_c.Run(run)
	return _c
}

// SetTags provides a mock function with given fields: tags
func (_m *MockEvent) SetTags(tags map[string]string) {
	_m.Called(tags)
}

// MockEvent_SetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTags'
type MockEvent_SetTags_Call struct {
	*mock.Call
}

// SetTags is a helper method to define mock.On call
//   - tags map[string]string
func (_e *MockEvent_Expecter) SetTags(tags interface{}) *MockEvent_SetTags_Call {
	return &MockEvent_SetTags_Call{Call: _e.mock.On("SetTags", tags)}
}

func (_c *MockEvent_SetTags_Call) Run(run func(tags map[string]string)) *MockEvent_SetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *MockEvent_SetTags_Call) Return() *MockEvent_SetTags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_SetTags_Call) RunAndReturn(run func(map[string]string)) *MockEvent_SetTags_Call {
	_c.Run(run)
	return _c
}

// SetUser provides a mock function with given fields: id, email, username
func (_m *MockEvent) SetUser(id string, email string, username string) {
	_m.Called(id, email, username)
}

// MockEvent_SetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUser'
type MockEvent_SetUser_Call struct {
	*mock.Call
}

// SetUser is a helper method to define mock.On call
//   - id string
//   - email string
//   - username string
func (_e *MockEvent_Expecter) SetUser(id interface{}, email interface{}, username interface{}) *MockEvent_SetUser_Call {
	return &MockEvent_SetUser_Call{Call: _e.mock.On("SetUser", id, email, username)}
}

func (_c *MockEvent_SetUser_Call) Run(run func(id string, email string, username string)) *MockEvent_SetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEvent_SetUser_Call) Return() *MockEvent_SetUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEvent_SetUser_Call) RunAndReturn(run func(string, string, string)) *MockEvent_SetUser_Call {
	_c.Run(run)
	return _c
}

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
