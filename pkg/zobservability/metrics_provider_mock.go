// Code generated by mockery. DO NOT EDIT.

package zobservability

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMetricsProvider is an autogenerated mock type for the MetricsProvider type
type MockMetricsProvider struct {
	mock.Mock
}

type MockMetricsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsProvider) EXPECT() *MockMetricsProvider_Expecter {
	return &MockMetricsProvider_Expecter{mock: &_m.Mock}
}

// AddToCounter provides a mock function with given fields: ctx, name, value, labels
func (_m *MockMetricsProvider) AddToCounter(ctx context.Context, name string, value float64, labels map[string]string) error {
	ret := _m.Called(ctx, name, value, labels)

	if len(ret) == 0 {
		panic("no return value specified for AddToCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, map[string]string) error); ok {
		r0 = rf(ctx, name, value, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_AddToCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToCounter'
type MockMetricsProvider_AddToCounter_Call struct {
	*mock.Call
}

// AddToCounter is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value float64
//   - labels map[string]string
func (_e *MockMetricsProvider_Expecter) AddToCounter(ctx interface{}, name interface{}, value interface{}, labels interface{}) *MockMetricsProvider_AddToCounter_Call {
	return &MockMetricsProvider_AddToCounter_Call{Call: _e.mock.On("AddToCounter", ctx, name, value, labels)}
}

func (_c *MockMetricsProvider_AddToCounter_Call) Run(run func(ctx context.Context, name string, value float64, labels map[string]string)) *MockMetricsProvider_AddToCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsProvider_AddToCounter_Call) Return(_a0 error) *MockMetricsProvider_AddToCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_AddToCounter_Call) RunAndReturn(run func(context.Context, string, float64, map[string]string) error) *MockMetricsProvider_AddToCounter_Call {
	_c.Call.Return(run)
	return _c
}

// AddToGauge provides a mock function with given fields: ctx, name, value, labels
func (_m *MockMetricsProvider) AddToGauge(ctx context.Context, name string, value float64, labels map[string]string) error {
	ret := _m.Called(ctx, name, value, labels)

	if len(ret) == 0 {
		panic("no return value specified for AddToGauge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, map[string]string) error); ok {
		r0 = rf(ctx, name, value, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_AddToGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToGauge'
type MockMetricsProvider_AddToGauge_Call struct {
	*mock.Call
}

// AddToGauge is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value float64
//   - labels map[string]string
func (_e *MockMetricsProvider_Expecter) AddToGauge(ctx interface{}, name interface{}, value interface{}, labels interface{}) *MockMetricsProvider_AddToGauge_Call {
	return &MockMetricsProvider_AddToGauge_Call{Call: _e.mock.On("AddToGauge", ctx, name, value, labels)}
}

func (_c *MockMetricsProvider_AddToGauge_Call) Run(run func(ctx context.Context, name string, value float64, labels map[string]string)) *MockMetricsProvider_AddToGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsProvider_AddToGauge_Call) Return(_a0 error) *MockMetricsProvider_AddToGauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_AddToGauge_Call) RunAndReturn(run func(context.Context, string, float64, map[string]string) error) *MockMetricsProvider_AddToGauge_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementCounter provides a mock function with given fields: ctx, name, labels
func (_m *MockMetricsProvider) IncrementCounter(ctx context.Context, name string, labels map[string]string) error {
	ret := _m.Called(ctx, name, labels)

	if len(ret) == 0 {
		panic("no return value specified for IncrementCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) error); ok {
		r0 = rf(ctx, name, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_IncrementCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementCounter'
type MockMetricsProvider_IncrementCounter_Call struct {
	*mock.Call
}

// IncrementCounter is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - labels map[string]string
func (_e *MockMetricsProvider_Expecter) IncrementCounter(ctx interface{}, name interface{}, labels interface{}) *MockMetricsProvider_IncrementCounter_Call {
	return &MockMetricsProvider_IncrementCounter_Call{Call: _e.mock.On("IncrementCounter", ctx, name, labels)}
}

func (_c *MockMetricsProvider_IncrementCounter_Call) Run(run func(ctx context.Context, name string, labels map[string]string)) *MockMetricsProvider_IncrementCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsProvider_IncrementCounter_Call) Return(_a0 error) *MockMetricsProvider_IncrementCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_IncrementCounter_Call) RunAndReturn(run func(context.Context, string, map[string]string) error) *MockMetricsProvider_IncrementCounter_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockMetricsProvider) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMetricsProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockMetricsProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockMetricsProvider_Expecter) Name() *MockMetricsProvider_Name_Call {
	return &MockMetricsProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockMetricsProvider_Name_Call) Run(run func()) *MockMetricsProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetricsProvider_Name_Call) Return(_a0 string) *MockMetricsProvider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_Name_Call) RunAndReturn(run func() string) *MockMetricsProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RecordDuration provides a mock function with given fields: ctx, name, duration, labels
func (_m *MockMetricsProvider) RecordDuration(ctx context.Context, name string, duration time.Duration, labels map[string]string) error {
	ret := _m.Called(ctx, name, duration, labels)

	if len(ret) == 0 {
		panic("no return value specified for RecordDuration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, map[string]string) error); ok {
		r0 = rf(ctx, name, duration, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_RecordDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordDuration'
type MockMetricsProvider_RecordDuration_Call struct {
	*mock.Call
}

// RecordDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - duration time.Duration
//   - labels map[string]string
func (_e *MockMetricsProvider_Expecter) RecordDuration(ctx interface{}, name interface{}, duration interface{}, labels interface{}) *MockMetricsProvider_RecordDuration_Call {
	return &MockMetricsProvider_RecordDuration_Call{Call: _e.mock.On("RecordDuration", ctx, name, duration, labels)}
}

func (_c *MockMetricsProvider_RecordDuration_Call) Run(run func(ctx context.Context, name string, duration time.Duration, labels map[string]string)) *MockMetricsProvider_RecordDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsProvider_RecordDuration_Call) Return(_a0 error) *MockMetricsProvider_RecordDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_RecordDuration_Call) RunAndReturn(run func(context.Context, string, time.Duration, map[string]string) error) *MockMetricsProvider_RecordDuration_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistogram provides a mock function with given fields: ctx, name, value, labels
func (_m *MockMetricsProvider) RecordHistogram(ctx context.Context, name string, value float64, labels map[string]string) error {
	ret := _m.Called(ctx, name, value, labels)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistogram")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, map[string]string) error); ok {
		r0 = rf(ctx, name, value, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_RecordHistogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistogram'
type MockMetricsProvider_RecordHistogram_Call struct {
	*mock.Call
}

// RecordHistogram is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value float64
//   - labels map[string]string
func (_e *MockMetricsProvider_Expecter) RecordHistogram(ctx interface{}, name interface{}, value interface{}, labels interface{}) *MockMetricsProvider_RecordHistogram_Call {
	return &MockMetricsProvider_RecordHistogram_Call{Call: _e.mock.On("RecordHistogram", ctx, name, value, labels)}
}

func (_c *MockMetricsProvider_RecordHistogram_Call) Run(run func(ctx context.Context, name string, value float64, labels map[string]string)) *MockMetricsProvider_RecordHistogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsProvider_RecordHistogram_Call) Return(_a0 error) *MockMetricsProvider_RecordHistogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_RecordHistogram_Call) RunAndReturn(run func(context.Context, string, float64, map[string]string) error) *MockMetricsProvider_RecordHistogram_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCounter provides a mock function with given fields: name, help, labelNames
func (_m *MockMetricsProvider) RegisterCounter(name string, help string, labelNames []string) error {
	ret := _m.Called(name, help, labelNames)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(name, help, labelNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_RegisterCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCounter'
type MockMetricsProvider_RegisterCounter_Call struct {
	*mock.Call
}

// RegisterCounter is a helper method to define mock.On call
//   - name string
//   - help string
//   - labelNames []string
func (_e *MockMetricsProvider_Expecter) RegisterCounter(name interface{}, help interface{}, labelNames interface{}) *MockMetricsProvider_RegisterCounter_Call {
	return &MockMetricsProvider_RegisterCounter_Call{Call: _e.mock.On("RegisterCounter", name, help, labelNames)}
}

func (_c *MockMetricsProvider_RegisterCounter_Call) Run(run func(name string, help string, labelNames []string)) *MockMetricsProvider_RegisterCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockMetricsProvider_RegisterCounter_Call) Return(_a0 error) *MockMetricsProvider_RegisterCounter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_RegisterCounter_Call) RunAndReturn(run func(string, string, []string) error) *MockMetricsProvider_RegisterCounter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterGauge provides a mock function with given fields: name, help, labelNames
func (_m *MockMetricsProvider) RegisterGauge(name string, help string, labelNames []string) error {
	ret := _m.Called(name, help, labelNames)

	if len(ret) == 0 {
		panic("no return value specified for RegisterGauge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(name, help, labelNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_RegisterGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGauge'
type MockMetricsProvider_RegisterGauge_Call struct {
	*mock.Call
}

// RegisterGauge is a helper method to define mock.On call
//   - name string
//   - help string
//   - labelNames []string
func (_e *MockMetricsProvider_Expecter) RegisterGauge(name interface{}, help interface{}, labelNames interface{}) *MockMetricsProvider_RegisterGauge_Call {
	return &MockMetricsProvider_RegisterGauge_Call{Call: _e.mock.On("RegisterGauge", name, help, labelNames)}
}

func (_c *MockMetricsProvider_RegisterGauge_Call) Run(run func(name string, help string, labelNames []string)) *MockMetricsProvider_RegisterGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockMetricsProvider_RegisterGauge_Call) Return(_a0 error) *MockMetricsProvider_RegisterGauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_RegisterGauge_Call) RunAndReturn(run func(string, string, []string) error) *MockMetricsProvider_RegisterGauge_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHistogram provides a mock function with given fields: name, help, labelNames, buckets
func (_m *MockMetricsProvider) RegisterHistogram(name string, help string, labelNames []string, buckets []float64) error {
	ret := _m.Called(name, help, labelNames, buckets)

	if len(ret) == 0 {
		panic("no return value specified for RegisterHistogram")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, []float64) error); ok {
		r0 = rf(name, help, labelNames, buckets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_RegisterHistogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHistogram'
type MockMetricsProvider_RegisterHistogram_Call struct {
	*mock.Call
}

// RegisterHistogram is a helper method to define mock.On call
//   - name string
//   - help string
//   - labelNames []string
//   - buckets []float64
func (_e *MockMetricsProvider_Expecter) RegisterHistogram(name interface{}, help interface{}, labelNames interface{}, buckets interface{}) *MockMetricsProvider_RegisterHistogram_Call {
	return &MockMetricsProvider_RegisterHistogram_Call{Call: _e.mock.On("RegisterHistogram", name, help, labelNames, buckets)}
}

func (_c *MockMetricsProvider_RegisterHistogram_Call) Run(run func(name string, help string, labelNames []string, buckets []float64)) *MockMetricsProvider_RegisterHistogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string), args[3].([]float64))
	})
	return _c
}

func (_c *MockMetricsProvider_RegisterHistogram_Call) Return(_a0 error) *MockMetricsProvider_RegisterHistogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_RegisterHistogram_Call) RunAndReturn(run func(string, string, []string, []float64) error) *MockMetricsProvider_RegisterHistogram_Call {
	_c.Call.Return(run)
	return _c
}

// SetGauge provides a mock function with given fields: ctx, name, value, labels
func (_m *MockMetricsProvider) SetGauge(ctx context.Context, name string, value float64, labels map[string]string) error {
	ret := _m.Called(ctx, name, value, labels)

	if len(ret) == 0 {
		panic("no return value specified for SetGauge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, map[string]string) error); ok {
		r0 = rf(ctx, name, value, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_SetGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGauge'
type MockMetricsProvider_SetGauge_Call struct {
	*mock.Call
}

// SetGauge is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value float64
//   - labels map[string]string
func (_e *MockMetricsProvider_Expecter) SetGauge(ctx interface{}, name interface{}, value interface{}, labels interface{}) *MockMetricsProvider_SetGauge_Call {
	return &MockMetricsProvider_SetGauge_Call{Call: _e.mock.On("SetGauge", ctx, name, value, labels)}
}

func (_c *MockMetricsProvider_SetGauge_Call) Run(run func(ctx context.Context, name string, value float64, labels map[string]string)) *MockMetricsProvider_SetGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsProvider_SetGauge_Call) Return(_a0 error) *MockMetricsProvider_SetGauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_SetGauge_Call) RunAndReturn(run func(context.Context, string, float64, map[string]string) error) *MockMetricsProvider_SetGauge_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockMetricsProvider) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockMetricsProvider_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockMetricsProvider_Expecter) Start() *MockMetricsProvider_Start_Call {
	return &MockMetricsProvider_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockMetricsProvider_Start_Call) Run(run func()) *MockMetricsProvider_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetricsProvider_Start_Call) Return(_a0 error) *MockMetricsProvider_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_Start_Call) RunAndReturn(run func() error) *MockMetricsProvider_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockMetricsProvider) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricsProvider_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockMetricsProvider_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockMetricsProvider_Expecter) Stop() *MockMetricsProvider_Stop_Call {
	return &MockMetricsProvider_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockMetricsProvider_Stop_Call) Run(run func()) *MockMetricsProvider_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetricsProvider_Stop_Call) Return(_a0 error) *MockMetricsProvider_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsProvider_Stop_Call) RunAndReturn(run func() error) *MockMetricsProvider_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricsProvider creates a new instance of MockMetricsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsProvider {
	mock := &MockMetricsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
