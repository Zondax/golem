// Code generated by mockery. DO NOT EDIT.

package factory

import (
	mock "github.com/stretchr/testify/mock"
	zobservability "github.com/zondax/golem/pkg/zobservability"
)

// MockobserverFactory is an autogenerated mock type for the observerFactory type
type MockobserverFactory struct {
	mock.Mock
}

type MockobserverFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockobserverFactory) EXPECT() *MockobserverFactory_Expecter {
	return &MockobserverFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: config, serviceName
func (_m *MockobserverFactory) Execute(config *zobservability.Config, serviceName string) (zobservability.Observer, error) {
	ret := _m.Called(config, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 zobservability.Observer
	var r1 error
	if rf, ok := ret.Get(0).(func(*zobservability.Config, string) (zobservability.Observer, error)); ok {
		return rf(config, serviceName)
	}
	if rf, ok := ret.Get(0).(func(*zobservability.Config, string) zobservability.Observer); ok {
		r0 = rf(config, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zobservability.Observer)
		}
	}

	if rf, ok := ret.Get(1).(func(*zobservability.Config, string) error); ok {
		r1 = rf(config, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobserverFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockobserverFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - config *zobservability.Config
//   - serviceName string
func (_e *MockobserverFactory_Expecter) Execute(config interface{}, serviceName interface{}) *MockobserverFactory_Execute_Call {
	return &MockobserverFactory_Execute_Call{Call: _e.mock.On("Execute", config, serviceName)}
}

func (_c *MockobserverFactory_Execute_Call) Run(run func(config *zobservability.Config, serviceName string)) *MockobserverFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zobservability.Config), args[1].(string))
	})
	return _c
}

func (_c *MockobserverFactory_Execute_Call) Return(_a0 zobservability.Observer, _a1 error) *MockobserverFactory_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobserverFactory_Execute_Call) RunAndReturn(run func(*zobservability.Config, string) (zobservability.Observer, error)) *MockobserverFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockobserverFactory creates a new instance of MockobserverFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockobserverFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockobserverFactory {
	mock := &MockobserverFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
