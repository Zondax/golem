// Code generated by mockery. DO NOT EDIT.

package zobservability

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockObserver is an autogenerated mock type for the Observer type
type MockObserver struct {
	mock.Mock
}

type MockObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObserver) EXPECT() *MockObserver_Expecter {
	return &MockObserver_Expecter{mock: &_m.Mock}
}

// CaptureException provides a mock function with given fields: ctx, err, opts
func (_m *MockObserver) CaptureException(ctx context.Context, err error, opts ...EventOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockObserver_CaptureException_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureException'
type MockObserver_CaptureException_Call struct {
	*mock.Call
}

// CaptureException is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
//   - opts ...EventOption
func (_e *MockObserver_Expecter) CaptureException(ctx interface{}, err interface{}, opts ...interface{}) *MockObserver_CaptureException_Call {
	return &MockObserver_CaptureException_Call{Call: _e.mock.On("CaptureException",
		append([]interface{}{ctx, err}, opts...)...)}
}

func (_c *MockObserver_CaptureException_Call) Run(run func(ctx context.Context, err error, opts ...EventOption)) *MockObserver_CaptureException_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]EventOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(EventOption)
			}
		}
		run(args[0].(context.Context), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockObserver_CaptureException_Call) Return() *MockObserver_CaptureException_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObserver_CaptureException_Call) RunAndReturn(run func(context.Context, error, ...EventOption)) *MockObserver_CaptureException_Call {
	_c.Run(run)
	return _c
}

// CaptureMessage provides a mock function with given fields: ctx, message, level, opts
func (_m *MockObserver) CaptureMessage(ctx context.Context, message string, level Level, opts ...EventOption) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, message, level)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockObserver_CaptureMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureMessage'
type MockObserver_CaptureMessage_Call struct {
	*mock.Call
}

// CaptureMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - level Level
//   - opts ...EventOption
func (_e *MockObserver_Expecter) CaptureMessage(ctx interface{}, message interface{}, level interface{}, opts ...interface{}) *MockObserver_CaptureMessage_Call {
	return &MockObserver_CaptureMessage_Call{Call: _e.mock.On("CaptureMessage",
		append([]interface{}{ctx, message, level}, opts...)...)}
}

func (_c *MockObserver_CaptureMessage_Call) Run(run func(ctx context.Context, message string, level Level, opts ...EventOption)) *MockObserver_CaptureMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]EventOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(EventOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(Level), variadicArgs...)
	})
	return _c
}

func (_c *MockObserver_CaptureMessage_Call) Return() *MockObserver_CaptureMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObserver_CaptureMessage_Call) RunAndReturn(run func(context.Context, string, Level, ...EventOption)) *MockObserver_CaptureMessage_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockObserver) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObserver_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockObserver_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockObserver_Expecter) Close() *MockObserver_Close_Call {
	return &MockObserver_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockObserver_Close_Call) Run(run func()) *MockObserver_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObserver_Close_Call) Return(_a0 error) *MockObserver_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObserver_Close_Call) RunAndReturn(run func() error) *MockObserver_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with no fields
func (_m *MockObserver) GetConfig() Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 Config
	if rf, ok := ret.Get(0).(func() Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Config)
	}

	return r0
}

// MockObserver_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockObserver_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockObserver_Expecter) GetConfig() *MockObserver_GetConfig_Call {
	return &MockObserver_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockObserver_GetConfig_Call) Run(run func()) *MockObserver_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObserver_GetConfig_Call) Return(_a0 Config) *MockObserver_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObserver_GetConfig_Call) RunAndReturn(run func() Config) *MockObserver_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function with no fields
func (_m *MockObserver) GetMetrics() MetricsProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 MetricsProvider
	if rf, ok := ret.Get(0).(func() MetricsProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MetricsProvider)
		}
	}

	return r0
}

// MockObserver_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockObserver_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
func (_e *MockObserver_Expecter) GetMetrics() *MockObserver_GetMetrics_Call {
	return &MockObserver_GetMetrics_Call{Call: _e.mock.On("GetMetrics")}
}

func (_c *MockObserver_GetMetrics_Call) Run(run func()) *MockObserver_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObserver_GetMetrics_Call) Return(_a0 MetricsProvider) *MockObserver_GetMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObserver_GetMetrics_Call) RunAndReturn(run func() MetricsProvider) *MockObserver_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// StartSpan provides a mock function with given fields: ctx, operation, opts
func (_m *MockObserver) StartSpan(ctx context.Context, operation string, opts ...SpanOption) (context.Context, Span) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSpan")
	}

	var r0 context.Context
	var r1 Span
	if rf, ok := ret.Get(0).(func(context.Context, string, ...SpanOption) (context.Context, Span)); ok {
		return rf(ctx, operation, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...SpanOption) context.Context); ok {
		r0 = rf(ctx, operation, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...SpanOption) Span); ok {
		r1 = rf(ctx, operation, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Span)
		}
	}

	return r0, r1
}

// MockObserver_StartSpan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSpan'
type MockObserver_StartSpan_Call struct {
	*mock.Call
}

// StartSpan is a helper method to define mock.On call
//   - ctx context.Context
//   - operation string
//   - opts ...SpanOption
func (_e *MockObserver_Expecter) StartSpan(ctx interface{}, operation interface{}, opts ...interface{}) *MockObserver_StartSpan_Call {
	return &MockObserver_StartSpan_Call{Call: _e.mock.On("StartSpan",
		append([]interface{}{ctx, operation}, opts...)...)}
}

func (_c *MockObserver_StartSpan_Call) Run(run func(ctx context.Context, operation string, opts ...SpanOption)) *MockObserver_StartSpan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SpanOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(SpanOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockObserver_StartSpan_Call) Return(_a0 context.Context, _a1 Span) *MockObserver_StartSpan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObserver_StartSpan_Call) RunAndReturn(run func(context.Context, string, ...SpanOption) (context.Context, Span)) *MockObserver_StartSpan_Call {
	_c.Call.Return(run)
	return _c
}

// StartTransaction provides a mock function with given fields: ctx, name, opts
func (_m *MockObserver) StartTransaction(ctx context.Context, name string, opts ...TransactionOption) Transaction {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTransaction")
	}

	var r0 Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string, ...TransactionOption) Transaction); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Transaction)
		}
	}

	return r0
}

// MockObserver_StartTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartTransaction'
type MockObserver_StartTransaction_Call struct {
	*mock.Call
}

// StartTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts ...TransactionOption
func (_e *MockObserver_Expecter) StartTransaction(ctx interface{}, name interface{}, opts ...interface{}) *MockObserver_StartTransaction_Call {
	return &MockObserver_StartTransaction_Call{Call: _e.mock.On("StartTransaction",
		append([]interface{}{ctx, name}, opts...)...)}
}

func (_c *MockObserver_StartTransaction_Call) Run(run func(ctx context.Context, name string, opts ...TransactionOption)) *MockObserver_StartTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]TransactionOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(TransactionOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockObserver_StartTransaction_Call) Return(_a0 Transaction) *MockObserver_StartTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObserver_StartTransaction_Call) RunAndReturn(run func(context.Context, string, ...TransactionOption) Transaction) *MockObserver_StartTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObserver creates a new instance of MockObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObserver {
	mock := &MockObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
