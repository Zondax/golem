// Code generated by mockery. DO NOT EDIT.

package zobservability

import mock "github.com/stretchr/testify/mock"

// MockEventOption is an autogenerated mock type for the EventOption type
type MockEventOption struct {
	mock.Mock
}

type MockEventOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventOption) EXPECT() *MockEventOption_Expecter {
	return &MockEventOption_Expecter{mock: &_m.Mock}
}

// ApplyEvent provides a mock function with given fields: _a0
func (_m *MockEventOption) ApplyEvent(_a0 Event) {
	_m.Called(_a0)
}

// MockEventOption_ApplyEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyEvent'
type MockEventOption_ApplyEvent_Call struct {
	*mock.Call
}

// ApplyEvent is a helper method to define mock.On call
//   - _a0 Event
func (_e *MockEventOption_Expecter) ApplyEvent(_a0 interface{}) *MockEventOption_ApplyEvent_Call {
	return &MockEventOption_ApplyEvent_Call{Call: _e.mock.On("ApplyEvent", _a0)}
}

func (_c *MockEventOption_ApplyEvent_Call) Run(run func(_a0 Event)) *MockEventOption_ApplyEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Event))
	})
	return _c
}

func (_c *MockEventOption_ApplyEvent_Call) Return() *MockEventOption_ApplyEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventOption_ApplyEvent_Call) RunAndReturn(run func(Event)) *MockEventOption_ApplyEvent_Call {
	_c.Run(run)
	return _c
}

// NewMockEventOption creates a new instance of MockEventOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventOption {
	mock := &MockEventOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
